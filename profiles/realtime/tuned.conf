#
# tuned configuration
#
# Red Hat Enterprise Linux for Real Time Documentation:
# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux_for_Real_Time/


[main]
include = network-latency

[variables]
# User is responsible for updating variables.conf with variable content such as isolated_cores=X-Y 
include = variables.conf

[sysctl]
kernel.nmi_watchdog = 0
kernel.sched_rt_runtime_us = 1000000
vm.stat_interval = 10

[sysfs]
/sys/bus/workqueue/devices/writeback/cpumask = $isolated_cores
# this ignore_ce regext doesn't work without BZ1212831
/sys/devices/system/machinecheck/machinecheck*/ignore_ce = 1

[bootloader]
# This should be tuned if CPU 0 is not fast enough to run all non-realtime
# tasks on the system (including kernel tasks like storage I/O).

# In a NUMA system, keeping one CPU on each NUMA node available to handle
# system tasks and IRQs ensures that every device IRQ can be handled by a
# CPU on the same NUMA node as the device itself.

# In the example below, CPUs 0 and 1 are kept available for system use
# leading to "isolcpus=2-23 nohz_full=2-23"

# # lscpu | grep ^NUMA
# NUMA node0 CPU(s):     0,2,4,6,8,10,12,14,16,18,20,22
# NUMA node1 CPU(s):     1,3,5,7,9,11,13,15,17,19,21,23

cmdline="isolcpus=$isolated_cores nohz_full=$isolated_cores mce=ignore_ce intel_pstate=disable nosoftlockup"

# We are going to be able to remove mce=ignore_ce in RHEL7.2, via BZ1212831
# See sysfs section above.

[scheduler]
# group.GROUPNAME=RULE_PRIO:SCHED:PRIO:AFFINITY:REGEX
# for i in `pgrep ksoftirqd` ; do grep Cpus_allowed_list /proc/$i/status ; done

group.ksoftirqd=0:*:*:$isolated_cores_in_hex:ksoftirqd.*
group.rcu=0:*:*:$isolated_cores_in_hex:rcu.*

[script]
script = script.py
